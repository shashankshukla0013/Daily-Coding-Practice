https://leetcode.com/problems/search-insert-position/
class Solution {
    public int searchInsert(int[] nums, int target) {
        if(target>nums[nums.length-1]) return nums.length;
        for(int i=0;i<nums.length;i++){
                if(nums[i]>=target){
                    return i;
                }
        }
        return 0;
    }
}

OR
class Solution {
    public int searchInsert(int[] nums, int target) {

        int left = 0;
        int right = nums.length-1;
        while(left<=right){
        int mid = (left + right)/2;
            if(nums[mid]==target) return mid;
            else if(nums[mid]>target){
                right  =  mid-1;
            }
            else{left=mid+=1;}
        }
        return left;
    }
}

https://leetcode.com/problems/first-bad-version/
/* The isBadVersion API is defined in the parent class VersionControl.
      boolean isBadVersion(int version); */

public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        int left = 1;
        int right = n;
        while(left<right){
            int mid = left+(right-left)/2;
            if(isBadVersion(mid)) right = mid;
            else left = mid+1;
        }  
        return left;
    }
}

https://leetcode.com/problems/monotonic-array/description/
class Solution {
    public boolean isMonotonic(int[] nums) {
        int countI=0,countD = 0,countE=0;
        for(int i=0;i<nums.length-1;i++){
            if(nums[i]<nums[i+1]) countI++;
            else if (nums[i]>nums[i+1]) countD++;
            else countE++;
        }
        if((countI+countE==nums.length-1) || (countD+countE==nums.length-1)) return true;
        else return false;
    }
}

OR

class Solution {
    public boolean isMonotonic(int[] nums) {
        boolean increasing = true;
        boolean decreasing = true;

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > nums[i - 1]) {
                decreasing = false;
            } else if (nums[i] < nums[i - 1]) {
                increasing = false;
            }

            if (!increasing && !decreasing) {
                return false;
            }
        }

        return true;
    }
}
